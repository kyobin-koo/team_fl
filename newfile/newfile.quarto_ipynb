{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: '`뉴욕 비행장` <br> 데이터 분석'\n",
        "title-slide-attributes: \n",
        "    data-background-image: airport.jpg\n",
        "    data-background-size: cover\n",
        "    data-background-opacity: '0.3'  \n",
        "author: '8조 구교빈, 김예원, 김윤희, 남원정'\n",
        "subtitle: '항공사별 지연 데이터 분석' \n",
        "format: \n",
        "    revealjs:\n",
        "        theme: default\n",
        "        slide-number: true\n",
        "        toc: true\n",
        "        toc-title: \"목차\"\n",
        "        transition: fade\n",
        "        footer: '8조'\n",
        "\n",
        "css: style.css  # 커스텀 CSS 추가\n",
        "---\n",
        "\n",
        "\n",
        "## 뉴욕 비행장에 대한 정보를 알아보자!\n"
      ],
      "id": "ebe78571"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from nycflights13 import flights,planes"
      ],
      "id": "18651a76",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 변수명 소개 {.scrollable}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "| 컬럼 명        | 설명                                   |\n",
        "|----------------|----------------------------------------|\n",
        "| year           | 2013년도                               |\n",
        "| month          | 월                                     |\n",
        "| day            | 일                                     |\n",
        "| dep_time       | 실제 출발 시간                         |\n",
        "| sched_dep_time | 예정된 출발 시간                       |\n",
        "| dep_delay      | 출발 지연 시간(분 단위)                |\n",
        "| arr_time       | 실제 도착 시간                         |\n",
        "| sched_arr_time | 예정된 도착 시간                       |\n",
        "| arr_delay      | 도착 지연 시간(분 단위)                |\n",
        "| carrier        | 항공사 코드                            |\n",
        "| flight         | 항공편 번호                            |\n",
        "| tailnum        | 항공기 등록 번호                       |\n",
        "| origin         | 출발 공항 코드                         |\n",
        "| dest           | 도착 공항 코드                         |\n",
        "| air_time       | 비행 시간(분 단위)                     |\n",
        "| distance       | 비행 거리(마일 단위)                   |\n",
        "| hour           | 출발 예정 시간(시간 단위)              |\n",
        "| minute         | 출발 예정 시간(분 단위)                |\n",
        "| time_hour      | 출발 예정 시간(POSIXct 날짜/시간 형식) |\n",
        "\n",
        ": flights\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "| 컬럼 명      | 설명             |\n",
        "|--------------|------------------|\n",
        "| tailnum      | 항공기 등록 번호 |\n",
        "| year         | 제작 연도        |\n",
        "| type         | 항공기 종류      |\n",
        "| manufacturer | 제조사           |\n",
        "| model        | 항공기 모델      |\n",
        "| engines      | 엔진 개수        |\n",
        "| seats        | 좌석 수          |\n",
        "| speed        | 순항 속도        |\n",
        "| engine       | 엔진 타입        |\n",
        "\n",
        ": planes\n",
        ":::\n",
        ":::::\n",
        "\n",
        "## \\# 데이터 전처리\n",
        "\n",
        "### 1 결측치 확인 {.scrollable}\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "-   flights\n"
      ],
      "id": "f2b6eda2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(flights.isna().sum())"
      ],
      "id": "bcec8ccb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "-   planes\n"
      ],
      "id": "dc66464e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "print(planes.isna().sum())"
      ],
      "id": "a405ad4f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 2) 결측치 제거 {.scrollable}\n",
        "\n",
        "```         \n",
        "- speed 열 삭제\n",
        "- dropna로 각 데이터 프레임 결측치 제거\n",
        "```\n"
      ],
      "id": "b6c6fff4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo : true\n",
        "#del planes['speed']\n",
        "\n",
        "#flights 결측치 전부 제거 \n",
        "f = flights.dropna()\n",
        "print(f.isna().sum())"
      ],
      "id": "55520fdd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#planes 결측치 제거 \n",
        "p = planes.dropna()\n",
        "print(p.isna().sum())"
      ],
      "id": "ce4ee2cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 3) 병합 / 중복열 삭제/ 변수명 변경 {.scrollable}\n"
      ],
      "id": "bc39dffa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#merge 및 중복열 삭제, 변수명 변경\n",
        "df =pd.merge(f,p,on='tailnum',how='inner')\n",
        "df.isna().sum()\n",
        "df = df.drop(columns=['sched_dep_time','time_hour'])\n",
        "df = df.rename(columns = {'year_x':'year','year_y':'man_year','hour':'sched_dep_hour','minute':'sched_dep_minute'})\n",
        "print(df.head())"
      ],
      "id": "fb4c21f6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 4-1) 데이터 현황 분석 {.scrollable}\n",
        "\n",
        "-   info/describe()\n"
      ],
      "id": "e279c8a1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df.info()"
      ],
      "id": "5f4913ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 4-2)데이터 현황 분석 {.scrollable}\n"
      ],
      "id": "6bd26aa2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df[['dep_delay','arr_delay','air_time','distance']].describe().round(2)"
      ],
      "id": "ecc492b2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 출발 지연 선택 이유\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "::: incremental\n",
        "-   출발 지연은 항공사의 운영 개선으로 효율성을 높일 수 있다.\n",
        "-   출발 지연은 도착 지연의 선행 요인이 될 수 있기에 연쇄 지연을 예방할 수 있다.\n",
        ":::\n",
        "\n",
        "# 데이터 후처리\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 출발 지연이 된 항공편 수 시각화\n"
      ],
      "id": "fdfbd6ef"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 출발 지연 시간 분포\n",
        "plt.figure(figsize=(12, 6))\n",
        "sns.histplot(df[\"dep_delay\"], bins=50, kde=True, color=\"blue\")\n",
        "plt.title(\"dep_delay_distribution\")\n",
        "plt.xlabel(\"dep_delay_minute\")\n",
        "plt.ylabel(\"operate_count\")\n",
        "plt.xlim(-10, 300)  # 극단적인 이상치는 제외하고 가시성 높이기\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "id": "82c887cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 요일별/월별/항공사별 평균 지연시간 시각화\n",
        "\n",
        "-요일별\n"
      ],
      "id": "93eb86f8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df['date'] = pd.to_datetime(df[['year', 'month', 'day']])\n",
        "df['day_of_week'] = df['date'].dt.dayofweek\n",
        "\n",
        "# 요일별 평균 출발 지연시간 계산\n",
        "weekday_delays = df.groupby('day_of_week')['dep_delay'].mean().reset_index()\n",
        "\n",
        "\n",
        "# 요일 이름 매핑\n",
        "weekday_labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n",
        "weekday_delays['day_of_week'] = weekday_delays['day_of_week'].map(lambda x: weekday_labels[x])"
      ],
      "id": "dfee2fba",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 시각화\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(weekday_delays['day_of_week'], weekday_delays['dep_delay'], color='skyblue', alpha=0.8)\n",
        "plt.xlabel('Day of the Week')\n",
        "plt.ylabel('Average Departure Delay (minutes)')\n",
        "plt.title('Average Departure Delay by Day of the Week')\n",
        "plt.xticks(rotation=45)\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "f526b35a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "-월별\n"
      ],
      "id": "f3463599"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mean_month=df.groupby(\"month\")[\"dep_delay\"].mean().reset_index()\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(mean_month['month'], mean_month['dep_delay'], color='skyblue', alpha=0.8)\n",
        "plt.xlabel('month')\n",
        "plt.ylabel('Average Departure Delay (minutes)')\n",
        "plt.title('Average Departure Delay by month')\n",
        "plt.xticks(ticks=range(1, 13), labels=range(1, 13))\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "ae04c639",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "## tab-set\n",
        "\n",
        "::: panel-tabset\n",
        "### 항공사별 평균 출발 지연 시간 그래프\n"
      ],
      "id": "e7fca973"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "carrier_mean = df.groupby('carrier')['dep_delay'].mean().reset_index().sort_values('dep_delay',ascending=False)\n",
        "df.groupby('carrier')['dep_delay'].median().sort_values(ascending=False)\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(carrier_mean['carrier'], carrier_mean['dep_delay'], color='skyblue', alpha=0.8)\n",
        "plt.xlabel('carrier')\n",
        "plt.ylabel('Average Departure Delay (minutes)')\n",
        "plt.title('Average Departure Delay by carrier')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "bd9cfabe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 평균 출발 지연이 가장 높은 항공사 2개\n"
      ],
      "id": "66477e79"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 평균 지연 시간 계산\n",
        "carrier_mean = df.groupby('carrier')['dep_delay'].mean().reset_index().sort_values('dep_delay', ascending=False)\n",
        "\n",
        "# 강조할 항공사\n",
        "highlight = ['F9', 'EV']\n",
        "\n",
        "# 색상 설정 (강조할 항공사만 파란색, 나머지는 회색)\n",
        "colors = ['blue' if carrier in highlight else 'lightgray' for carrier in carrier_mean['carrier']]\n",
        "\n",
        "# 그래프 그리기\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.bar(carrier_mean['carrier'], carrier_mean['dep_delay'], color=colors, alpha=0.8)\n",
        "plt.xlabel('Carrier')\n",
        "plt.ylabel('Average Departure Delay (minutes)')\n",
        "plt.title('Average Departure Delay by Carrier')\n",
        "\n",
        "# 강조한 막대에 라벨 추가\n",
        "for i, carrier in enumerate(carrier_mean['carrier']):\n",
        "    if carrier in highlight:\n",
        "        plt.text(i, carrier_mean['dep_delay'].iloc[i] + 0.5, f\"{carrier_mean['dep_delay'].iloc[i]:.1f}\", \n",
        "                 ha='center', fontsize=12, fontweight='bold')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()"
      ],
      "id": "c6f3d78d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 비교예시\n",
        "\n",
        "<br>\n",
        "\n",
        "<br>\n",
        "\n",
        "| 항공사 | 총 비행 횟수 | 지연된 비행 횟수 | 평균 지연 시간(분) | 지연 비율(%) |\n",
        "|--------|--------------|------------------|--------------------|--------------|\n",
        "| A      | <mark>1,500</mark>   | 500              | 20                 | 33.3%        |\n",
        "| B      | <mark>800</mark>    | 500              | 20                 | 62.5%        |\n",
        "\n",
        "---\n",
        "\n",
        "### min-max-scaler\n",
        "\n",
        "- 데이터의 값 범위를 특정 구간(0~1 사이)으로 변환하는 정규화 기법\n",
        "\n",
        "$$\n",
        "X_{\\text{scaled}} = \\frac{X - X_{\\text{min}}}{X_{\\text{max}} - X_{\\text{min}}}\n",
        "$$\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "# 본론\n",
        "\n",
        "---\n",
        "\n",
        "## 가중치 이용 {.scrollable}\n",
        "\n",
        "### 가중치 비중 기준은 3시간\n",
        "\n",
        "- `3시간 기준 선정 이유!`\n",
        "![](ppt_hour_3.png){width=\"80%\"}\n",
        "    ![Quarto 공식 사이트](https://www.seattlen.com/hot/38077?sfl=mb_id&page=853)\n",
        "    - 2024년 4월 미 교통부는 미국 국내선 기준으로 비행 시간 3시간 이상 지연되면 즉시 환불을 요청할 수 있도록 환불 규정을 통일시킴.\n",
        "    \n",
        "\n",
        "- `3시간 이상` 기준으로 평균과 비율에 `7:3`, `3시간 미만`인 경우 `5:5` 각각 다르게 가중치를 부여\n",
        "\n",
        "- 비율과 평균의 범위가 다르기 때문에 동일한 범위를 적용하고자 `Min-Max scaler`를 적용하여 `표준화`를 진행\n",
        "\n",
        "- 가중치로 계산된 최종 값으로 항공사별 지연 심각도 비교\n",
        "\n",
        "----\n",
        "\n",
        "## 분석 내용\n",
        "\n",
        "### 가중치를 적용하는 방법 {.scrollable}\n",
        "\n",
        "* step 1) 3시간 기준으로 데이터 필터링 진행\n",
        "    - 각 항공사별 전체 지연 횟수와 3시간 이상 지연 횟수.\n",
        "\n",
        "\n",
        "``` {.python code-line-numbers=\"|3|6|9|12\"}\n",
        "#| echo: True\n",
        "### 3시간 이상 지연된 항공사들 데이터 필터링\n",
        "delay_over_180 = df.loc[df['dep_delay'] >= 180]\n",
        "\n",
        "# 각 항공사별 전체 지연 횟수 \n",
        "df_count = df['carrier'].value_counts().reset_index()\n",
        "\n",
        "# 각 항공사별 180분 이상 지연 횟수\n",
        "delay_over_180_count = delay_over_180['carrier'].value_counts().reset_index()\n",
        "\n",
        "### 항공사를 중심으로 데이터 병합\n",
        "delay_over_180_count_merge = pd.merge(delay_over_180_count,df_count,on='carrier',how='outer')\n",
        "```"
      ],
      "id": "310b41dd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "### 3시간 이상 지연된 항공사들 데이터 필터링\n",
        "delay_over_180 = df.loc[df['dep_delay'] >= 180]\n",
        "\n",
        "# 각 항공사별 전체 지연 횟수 \n",
        "df_count = df['carrier'].value_counts().reset_index()\n",
        "\n",
        "# 각 항공사별 180분 이상 지연 횟수\n",
        "delay_over_180_count = delay_over_180['carrier'].value_counts().reset_index()\n",
        "\n",
        "### 항공사를 중심으로 데이터 병합\n",
        "delay_over_180_count_merge = pd.merge(delay_over_180_count,df_count,on='carrier',how='outer')"
      ],
      "id": "02bfdfe1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "\n",
        "* step 2) 각 항공사의 지연 시간 빈도수 계산\n",
        "    - 비율(ratio) = 각 항공사 출발 지연 시간 횟수 / 전체 빈도 수 \n",
        "    - 3시간 기준으로 이상 이하를 나눠서 진행\n",
        "        -> over_180_df 와 under_180_df\n",
        "\n",
        "        \n",
        "```{.python code-line-numbers=\"|3|5|8|9|11|14\"}\n",
        "#| echo: True\n",
        "### 각 항공사의 지연 시간 전체 비율 \n",
        "delay_over_180_ratio = pd.DataFrame((delay_over_180_count_merge.iloc[:,1] / delay_over_180_count_merge.iloc[:,2]).sort_index(ascending=True))\n",
        "\n",
        "ratio_over_180 = pd.concat([delay_over_180_count_merge,delay_over_180_ratio],axis=1)\n",
        "\n",
        "# 컬럼명 변경\n",
        "ratio_over_180 = ratio_over_180.rename(columns = {'count_x':'dep_delay_count','count_y': 'total_count',0:'ratio'})\n",
        "ratio_over_180.sort_values('ratio',ascending=False)\n",
        "\n",
        "over_180_df = pd.merge(ratio_over_180,delay_over_180.groupby('carrier')['dep_delay'].mean(),on='carrier',how='outer')\n",
        "\n",
        "# NaN값은 0으로 대체.\n",
        "over_180_df = over_180_df.fillna(0)\n",
        "```\n"
      ],
      "id": "9ae7dcaf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: False\n",
        "### 각 항공사의 지연 시간 전체 비율 \n",
        "delay_over_180_ratio = pd.DataFrame((delay_over_180_count_merge.iloc[:,1] / delay_over_180_count_merge.iloc[:,2]).sort_index(ascending=True))\n",
        "\n",
        "ratio_over_180 = pd.concat([delay_over_180_count_merge,delay_over_180_ratio],axis=1)\n",
        "\n",
        "# 컬럼명 변경\n",
        "ratio_over_180 = ratio_over_180.rename(columns = {'count_x':'dep_delay_count','count_y': 'total_count',0:'ratio'})\n",
        "ratio_over_180.sort_values('ratio',ascending=False)\n",
        "\n",
        "over_180_df = pd.merge(ratio_over_180,delay_over_180.groupby('carrier')['dep_delay'].mean(),on='carrier',how='outer')\n",
        "\n",
        "# NaN값은 0으로 대체.\n",
        "over_180_df = over_180_df.fillna(0)"
      ],
      "id": "b02f1101",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---         \n",
        "\n",
        "\n",
        "- 이와 같은 과정을 3시간 이하 지연된 데이터 동일 진행.\n",
        "\n",
        "```{.python code-line-numbers=\"|3|5|8|11|12|15|16\"}\n",
        "#| echo: True\n",
        "### 3시간 이하 지연된 항공사들 데이터 필터링\n",
        "delay_under_180 = df.loc[(df['dep_delay'] > 0) & (df['dep_delay'] <180)]\n",
        "# 각 항공사별 전체 지연 횟수\n",
        "delay_under_180_count = delay_under_180['carrier'].value_counts().reset_index()\n",
        "\n",
        "### 항공사를 중심으로 데이터 병합\n",
        "delay_under_180_count_merge = pd.merge(delay_under_180_count,df_count,on='carrier',how='outer')\n",
        "\n",
        "### 각 항공사의 지연 시간 전체 비율 \n",
        "delay_under_180_ratio = pd.DataFrame((delay_under_180_count_merge.iloc[:,1] / delay_under_180_count_merge.iloc[:,2]).sort_index(ascending=True))\n",
        "ratio_under_180 = pd.concat([delay_under_180_count_merge,delay_under_180_ratio],axis=1)\n",
        "\n",
        "# 컬럼명 변경\n",
        "ratio_under_180 = ratio_under_180.rename(columns = {'count_x':'dep_delay_count','count_y': 'total_count',0:'ratio'})\n",
        "ratio_under_180.sort_values('ratio',ascending=False)\n",
        "\n",
        "under_180_df = pd.merge(ratio_under_180,delay_under_180.groupby('carrier')['dep_delay'].mean(),on='carrier',how='outer')\n",
        "```\n"
      ],
      "id": "658e0d6b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: False\n",
        "### 3시간 이하 지연된 항공사들 데이터 필터링\n",
        "delay_under_180 = df.loc[(df['dep_delay'] > 0) & (df['dep_delay'] <180)]\n",
        "# 각 항공사별 전체 지연 횟수\n",
        "delay_under_180_count = delay_under_180['carrier'].value_counts().reset_index()\n",
        "\n",
        "### 항공사를 중심으로 데이터 병합\n",
        "delay_under_180_count_merge = pd.merge(delay_under_180_count,df_count,on='carrier',how='outer')\n",
        "\n",
        "### 각 항공사의 지연 시간 전체 비율 \n",
        "delay_under_180_ratio = pd.DataFrame((delay_under_180_count_merge.iloc[:,1] / delay_under_180_count_merge.iloc[:,2]).sort_index(ascending=True))\n",
        "ratio_under_180 = pd.concat([delay_under_180_count_merge,delay_under_180_ratio],axis=1)\n",
        "\n",
        "# 컬럼명 변경\n",
        "ratio_under_180 = ratio_under_180.rename(columns = {'count_x':'dep_delay_count','count_y': 'total_count',0:'ratio'})\n",
        "ratio_under_180.sort_values('ratio',ascending=False)\n",
        "\n",
        "under_180_df = pd.merge(ratio_under_180,delay_under_180.groupby('carrier')['dep_delay'].mean(),on='carrier',how='outer')"
      ],
      "id": "11a17446",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "* step 3) 가중치 부여하기\n",
        "    - step 2에서 필터링 진행한 데이터들에 가중치 부여\n",
        "    - ratio와 minmax_ratio의 Min_Max를 찾아 표준화 진행\n",
        "\n",
        "    \n",
        "```{.python code-line-numbers=\"|4|5|6|10|12|14|15\"}\n",
        "#| echo: True\n",
        "\n",
        "### step 2에서 필터링 진행한 데이터들 병합\n",
        "merged_df = pd.concat([over_180_df,under_180_df], axis=0).reset_index(drop=True)\n",
        "merged_df['minmax_ratio'] = (merged_df['ratio'] - merged_df['ratio'].min()) / (merged_df['ratio'].max() - merged_df['ratio'].min())\n",
        "merged_df['minmax_dep_delay'] = (merged_df['dep_delay'] - merged_df['dep_delay'].min()) / (merged_df['dep_delay'].max() - merged_df['dep_delay'].min())\n",
        "\n",
        "### ratio와 minmax_ratio의 Min_Max를 찾아 표준화 진행\n",
        "#전체 ratio 중에서 가장 큰 값/작은값은 0\n",
        "over_180_df['minmax_ratio'] = (over_180_df['ratio'])/0.524012 \n",
        "#전체 dep_delay중에서 가장 큰 값/작은값은 0\n",
        "over_180_df['minmax_dep_delay'] = (over_180_df['dep_delay'])/743.5  \n",
        "\n",
        "under_180_df['minmax_ratio'] = (under_180_df['ratio'])/0.524012\n",
        "under_180_df['minmax_dep_delay'] = (under_180_df['dep_delay'])/743.5\n",
        "\n",
        "```\n"
      ],
      "id": "e5301377"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: False\n",
        "\n",
        "### step 2에서 필터링 진행한 데이터들 병합\n",
        "merged_df = pd.concat([over_180_df,under_180_df], axis=0).reset_index(drop=True)\n",
        "merged_df['minmax_ratio'] = (merged_df['ratio'] - merged_df['ratio'].min()) / (merged_df['ratio'].max() - merged_df['ratio'].min())\n",
        "merged_df['minmax_dep_delay'] = (merged_df['dep_delay'] - merged_df['dep_delay'].min()) / (merged_df['dep_delay'].max() - merged_df['dep_delay'].min())\n",
        "\n",
        "### ratio와 minmax_ratio의 Min_Max를 찾아 표준화 진행\n",
        "#전체 ratio 중에서 가장 큰 값/작은값은 0\n",
        "over_180_df['minmax_ratio'] = (over_180_df['ratio'])/0.524012 \n",
        "#전체 dep_delay중에서 가장 큰 값/작은값은 0\n",
        "over_180_df['minmax_dep_delay'] = (over_180_df['dep_delay'])/743.5  \n",
        "\n",
        "under_180_df['minmax_ratio'] = (under_180_df['ratio'])/0.524012\n",
        "under_180_df['minmax_dep_delay'] = (under_180_df['dep_delay'])/743.5"
      ],
      "id": "c0b4e95e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "- `3시간 이상인 데이터`는 `ratio : minmax_dep_delay = 3:7` 비율로 적용\n",
        "- `3시간 이하인 데이터`는 `ratio : minmax_dep_delay = 5:5` 비율로 적용\n",
        "\n",
        "```{.python code-line-numbers=\"|3|6\"}\n",
        "#| echo: True\n",
        "\n",
        "weight_total_score = ((over_180_df['minmax_ratio'] * 0.3 + over_180_df['minmax_dep_delay'] * 0.7) + (under_180_df['minmax_ratio'] * 0.5 + under_180_df['minmax_dep_delay'] * 0.5))\n",
        "\n",
        "### 가중치를 적용한 최종 데이터\n",
        "weight_total_score_df = pd.concat([over_180_df['carrier'], weight_total_score], axis=1).sort_values(0,ascending=False)\n",
        "```\n"
      ],
      "id": "4661b13c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "weight_total_score = ((over_180_df['minmax_ratio'] * 0.3 + over_180_df['minmax_dep_delay'] * 0.7) + (under_180_df['minmax_ratio'] * 0.5 + under_180_df['minmax_dep_delay'] * 0.5))\n",
        "\n",
        "### 가중치를 적용한 최종 데이터\n",
        "weight_total_score_df = pd.concat([over_180_df['carrier'], weight_total_score], axis=1).sort_values(0,ascending=False)"
      ],
      "id": "2eed0920",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 최종 순위\n",
        "\n",
        "| 순위 | 출발 지연 시간 평균 비교 | 가중치를 적용한 비교 |\n",
        "|:----:|:------------------------:|:--------------------:|\n",
        "| 1위  |            `F9 `           |          `HA`          |\n",
        "| 2위  |            EV            |          `FL`          |\n",
        "| 3위  |            YV            |          WN          |\n",
        "| 4위  |            `FL`            |          `F9  `        |\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "## top4 특징 설명\n",
        "\n",
        "### 거리와 출발지연시간의 산점도 {.scrollable}\n"
      ],
      "id": "a4495b28"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=df, x='distance', y='dep_delay', alpha=0.5)\n",
        "plt.title(\"distance vs. dep_delay\")\n",
        "plt.xlabel(\"distance (mile)\")\n",
        "plt.ylabel(\"dep_delay (minute)\")\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "id": "bab10518",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "top_4_carriers = ['HA', 'FL', 'WN', 'F9']\n",
        "df_top_4 = df[df['carrier'].isin(top_4_carriers)]  # 상위 4개 항공사 데이터만 필터링\n",
        "\n",
        "sns.scatterplot(data=df_top_4, x='distance', y='dep_delay', hue='carrier', alpha=0.5, palette='tab10')\n",
        "\n",
        "plt.title(\"distance vs. dep_delay (carrier)\")\n",
        "plt.xlabel(\"distance (mile)\")\n",
        "plt.ylabel(\"dep_delay (minute)\")\n",
        "plt.legend(title=\"carrier\")\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "id": "73305571",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "------------------------------------------------------------------------\n",
        "\n",
        "### 기종, 엔진\n",
        "\n",
        "+----------+---------------+----------+------------+\n",
        "| Carrier  | Model         | Engine   | Engines    |\n",
        "+==========+===============+==========+============+\n",
        "| HA       | A330-243      | 2        | Turbo-fan  |\n",
        "+----------+---------------+----------+------------+\n",
        "| FL       | 717-200 외 2  | 2        | Turbo-fan  |\n",
        "+----------+---------------+----------+------------+\n",
        "| WN       | 737-7H4 외 19 | 2        | Turbo-fan, |\n",
        "|          |               |          |            |\n",
        "|          |               |          | Turbo-jet  |\n",
        "+----------+---------------+----------+------------+\n",
        "| F9       | A320-214      | 2        | Turbo-fan  |\n",
        "|          |               |          |            |\n",
        "|          | A320-214      |          |            |\n",
        "+----------+---------------+----------+------------+\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 월별/요일별\n",
        "\n",
        "- 월별 'HA', 'FL', 'WN', 'F9'의 출발 지연 횟수\n"
      ],
      "id": "e7277b19"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 특정 항공사 리스트\n",
        "selected_carriers = ['HA', 'FL', 'WN', 'F9']\n",
        "\n",
        "# 선택된 항공사만 필터링하여 월별 출발 지연 횟수 계산\n",
        "carrier_monthly_counts = df[(df['carrier'].isin(selected_carriers)) & (df['dep_delay'] > 0)] \\\n",
        "    .groupby(['month', 'carrier'])['dep_delay'].count().unstack()\n",
        "\n",
        "\n",
        "carrier_monthly_counts.info()\n",
        "\n",
        "\n",
        "# Seaborn 그룹화된 막대그래프\n",
        "plt.figure(figsize=(10, 5))\n",
        "carrier_monthly_counts.plot(kind='bar', figsize=(10, 5), colormap='tab10', edgecolor='black')\n",
        "\n",
        "# 그래프 설정\n",
        "plt.xlabel(\"Month\")\n",
        "plt.ylabel(\"Count of Delays\")\n",
        "plt.title(\"Monthly Delay Counts for Selected Carriers (HA, FL, WN, F9)\")\n",
        "plt.xticks(rotation=0)  # X축 레이블 가독성 유지\n",
        "plt.legend(title=\"Carrier\")\n",
        "\n",
        "# 그래프 출력\n",
        "plt.show()"
      ],
      "id": "2d24e21a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- 요일별 'HA', 'FL', 'WN', 'F9'의 출발 지연 횟수\n"
      ],
      "id": "3558e3f0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# 특정 항공사 리스트\n",
        "selected_carriers = ['HA', 'FL', 'WN', 'F9']\n",
        "\n",
        "# 선택된 항공사만 필터링하여 요일별 출발 지연 횟수 계산\n",
        "carrier_day_of_week_counts = df[(df['carrier'].isin(selected_carriers)) & (df['dep_delay'] > 0)] \\\n",
        "    .groupby(['day_of_week', 'carrier'])['dep_delay'].count().unstack()\n",
        "\n",
        "\n",
        "carrier_day_of_week_counts.info()\n",
        "\n",
        "\n",
        "# Seaborn 그룹화된 막대그래프\n",
        "plt.figure(figsize=(10, 5))\n",
        "carrier_day_of_week_counts.plot(kind='bar', figsize=(10, 5), colormap='tab10', edgecolor='black')\n",
        "\n",
        "# 그래프 설정\n",
        "plt.xlabel(\"Month\")\n",
        "plt.ylabel(\"Count of Delays\")\n",
        "plt.title(\"Monthly Delay Counts for Selected Carriers (HA, FL, WN, F9)\")\n",
        "plt.xticks(rotation=0)  # X축 레이블 가독성 유지\n",
        "plt.legend(title=\"Carrier\")\n",
        "\n",
        "# 그래프 출력\n",
        "plt.show()"
      ],
      "id": "10100118",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}